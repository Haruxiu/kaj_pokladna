{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinhp\\\\Desktop\\\\SIT\\\\KAJ\\\\src\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Navigation from './components/Navigation';\nimport Orders from './components/Orders';\nimport NewOrder from './components/NewOrder';\nimport History from './components/History';\nimport MenuManagement from './components/MenuManagement';\nimport Payment from './components/Payment';\nimport './styles/main.scss';\n\n// Main App component managing global state and routing.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Initialize state by attempting to load from localStorage,\n    // falling back to default data if localStorage is empty.\n    this.state = {\n      orders: JSON.parse(localStorage.getItem('orders')) || [],\n      history: JSON.parse(localStorage.getItem('history')) || [],\n      menuItems: JSON.parse(localStorage.getItem('menuItems')) || [\n      // Default menu items\n      {\n        id: 1,\n        name: 'Kuřecí řízek',\n        price: 150,\n        category: 'main'\n      }, {\n        id: 2,\n        name: 'Hovězí guláš',\n        price: 130,\n        category: 'main'\n      }, {\n        id: 3,\n        name: 'Pivo',\n        price: 35,\n        category: 'drink'\n      }, {\n        id: 4,\n        name: 'Kola',\n        price: 30,\n        category: 'drink'\n      }, {\n        id: 5,\n        name: 'Zmrzlina',\n        price: 45,\n        category: 'dessert'\n      }],\n      nextItemId: JSON.parse(localStorage.getItem('nextItemId')) || 6,\n      // Tracks the next available ID for new menu items\n      customCategories: JSON.parse(localStorage.getItem('customCategories')) || [],\n      // Stores user-defined menu categories\n      tables: JSON.parse(localStorage.getItem('tables')) || [\n      // Static table data\n      {\n        id: 1,\n        name: 'Stůl 1'\n      }, {\n        id: 2,\n        name: 'Stůl 2'\n      }, {\n        id: 3,\n        name: 'Stůl 3'\n      }, {\n        id: 4,\n        name: 'Stůl 4'\n      }]\n    };\n    // Bind all handler methods to the instance\n    this.updateOrderStatus = this.updateOrderStatus.bind(this);\n    this.showLocation = this.showLocation.bind(this);\n    this.showReceipt = this.showReceipt.bind(this);\n    this.setOrders = this.setOrders.bind(this);\n    this.setHistory = this.setHistory.bind(this);\n    this.setMenuItems = this.setMenuItems.bind(this);\n    this.setNextItemId = this.setNextItemId.bind(this);\n    this.setCustomCategories = this.setCustomCategories.bind(this);\n  }\n\n  /**\n   * Lifecycle method called after component updates (state or props changes).\n   * Used here to persist relevant state changes to localStorage.\n   * @param {object} prevProps - The previous props of the component.\n   * @param {object} prevState - The previous state of the component.\n   */\n  componentDidUpdate(prevProps, prevState) {\n    // Check if specific state slices have changed before saving to avoid unnecessary writes\n    if (prevState.orders !== this.state.orders) {\n      localStorage.setItem('orders', JSON.stringify(this.state.orders));\n    }\n    if (prevState.history !== this.state.history) {\n      localStorage.setItem('history', JSON.stringify(this.state.history));\n    }\n    if (prevState.menuItems !== this.state.menuItems) {\n      localStorage.setItem('menuItems', JSON.stringify(this.state.menuItems));\n    }\n    if (prevState.nextItemId !== this.state.nextItemId) {\n      localStorage.setItem('nextItemId', JSON.stringify(this.state.nextItemId));\n    }\n    if (prevState.customCategories !== this.state.customCategories) {\n      localStorage.setItem('customCategories', JSON.stringify(this.state.customCategories));\n    }\n    // Tables are currently static, so saving them is not necessary unless they become dynamic.\n  }\n\n  /**\n   * Custom state updater for the 'orders' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous orders state and returns the new state, or the new state array directly.\n   */\n  setOrders(updater) {\n    this.setState(prevState => {\n      // Handle both function-based and direct value updates\n      const newOrders = typeof updater === 'function' ? updater(prevState.orders) : updater;\n      localStorage.setItem('orders', JSON.stringify(newOrders));\n      return {\n        orders: newOrders\n      };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'history' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous history state and returns the new state, or the new state array directly.\n   */\n  setHistory(updater) {\n    this.setState(prevState => {\n      const newHistory = typeof updater === 'function' ? updater(prevState.history) : updater;\n      localStorage.setItem('history', JSON.stringify(newHistory));\n      return {\n        history: newHistory\n      };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'menuItems' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous menuItems state and returns the new state, or the new state array directly.\n   */\n  setMenuItems(updater) {\n    this.setState(prevState => {\n      const newMenuItems = typeof updater === 'function' ? updater(prevState.menuItems) : updater;\n      localStorage.setItem('menuItems', JSON.stringify(newMenuItems));\n      return {\n        menuItems: newMenuItems\n      };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'nextItemId' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|number} updater - A function that receives the previous nextItemId state and returns the new state, or the new state number directly.\n   */\n  setNextItemId(updater) {\n    this.setState(prevState => {\n      const newNextItemId = typeof updater === 'function' ? updater(prevState.nextItemId) : updater;\n      localStorage.setItem('nextItemId', JSON.stringify(newNextItemId));\n      return {\n        nextItemId: newNextItemId\n      };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'customCategories' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<string>} updater - A function that receives the previous customCategories state and returns the new state, or the new state array directly.\n   */\n  setCustomCategories(updater) {\n    this.setState(prevState => {\n      const newCustomCategories = typeof updater === 'function' ? updater(prevState.customCategories) : updater;\n      localStorage.setItem('customCategories', JSON.stringify(newCustomCategories));\n      return {\n        customCategories: newCustomCategories\n      };\n    });\n  }\n\n  /**\n   * Updates the status of a specific order.\n   * @param {number} orderId - The ID of the order to update.\n   * @param {string} newStatus - The new status to set for the order (e.g., 'pending', 'ready', 'paid').\n   */\n  updateOrderStatus(orderId, newStatus) {\n    this.setOrders(orders => orders.map(order => order.id === orderId ? {\n      ...order,\n      status: newStatus\n    } : order));\n  }\n\n  /**\n   * Handler to show user's location (simulated using alert).\n   * Connected to the History component's geolocation button.\n   * @param {object} location - An object containing location details (e.g., latitude, longitude, accuracy).\n   */\n  showLocation(location) {\n    alert(`Vaše poloha: ${location.latitude}, ${location.longitude}`);\n  }\n\n  /**\n   * Handler to generate and display a receipt for a completed order (simulated print).\n   * Connected to the History and Payment components.\n   * @param {number} orderId - The ID of the order to generate a receipt for.\n   */\n  showReceipt(orderId) {\n    const order = this.state.history.find(item => item.id === orderId);\n    if (!order) {\n      alert('Účtenka nebyla nalezena.');\n      return;\n    }\n\n    // Helper function to format the receipt content as a string.\n    const generateReceipt = paidOrder => {\n      let receipt = '\\n';\n      receipt += '==================\\n';\n      receipt += '=== RESTAURACE ===\\n';\n      receipt += '==================\\n\\n';\n      receipt += `Transakce #${paidOrder.id.toString().slice(-4)}\\n`;\n      receipt += `Datum: ${new Date(paidOrder.paymentTimestamp).toLocaleString()}\\n\\n`;\n      receipt += `Stůl: ${paidOrder.tableName}\\n`;\n      receipt += `Číslo objednávky: ${paidOrder.id}\\n\\n`;\n      receipt += '------------------\\n\\n';\n      receipt += 'Položky:\\n\\n';\n      paidOrder.items.forEach(item => {\n        receipt += `${item.name} ${item.price} Kč\\n`;\n      });\n      receipt += '\\n------------------\\n\\n';\n      receipt += `Celkem: ${paidOrder.total} Kč\\n`;\n      receipt += `Platba: ${paidOrder.paymentMethod === 'cash' ? 'Hotovost' : 'Karta'}\\n\\n`;\n      receipt += '==================\\n\\n';\n      receipt += 'Děkujeme za návštěvu!\\n';\n      receipt += 'Vítejte znovu\\n\\n';\n      receipt += '=== Harukoid s.r.o. ===\\n';\n      return receipt;\n    };\n\n    // Open a new window to simulate printing.\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) {\n      alert('Pop-up blokován. Povolte prosím vyskakovací okna pro tisk účtenky.');\n      return;\n    }\n    const receiptContent = generateReceipt(order);\n    // Construct basic HTML content for the receipt window.\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Účtenka #${order.id.toString().slice(-4)}</title>\n          <style>\n            @page {\n              size: 5.5in 8.5in; /* Typical receipt size */\n              margin: 0;\n            }\n            body {\n              font-family: monospace; /* Monospace font for receipt look */\n              white-space: pre; /* Preserve line breaks and spaces */\n              padding: 40px;\n              font-size: 14px;\n              line-height: 1.6;\n              width: 5.5in;\n              min-height: 8.5in;\n              margin: 0;\n              text-align: center;\n            }\n            @media print {\n              body {\n                padding: 40px;\n                margin: 0;\n                width: 5.5in;\n                min-height: 8.5in;\n                text-align: center;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          ${receiptContent}\n        </body>\n      </html>\n    `;\n\n    // Write content to the new window and close the document stream.\n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n\n    // Once the content is loaded, trigger the print dialog and close the window after printing.\n    printWindow.onload = function () {\n      printWindow.print();\n      printWindow.onafterprint = function () {\n        printWindow.close();\n      };\n    };\n  }\n  render() {\n    // Destructure state variables for easier access in render method.\n    const {\n      orders,\n      history,\n      menuItems,\n      nextItemId,\n      customCategories,\n      tables\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      // BrowserRouter provides routing context.\n      _jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app-content\",\n            children: [/*#__PURE__*/_jsxDEV(Navigation, {\n              history: history,\n              showReceipt: this.showReceipt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n              className: \"main-content\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"header\", {\n                className: \"app-header\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"header-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"Restaurant Cash Register\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 19\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    id: \"connectionStatus\",\n                    className: \"connection-status\",\n                    children: \"Online\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Routes, {\n                children: [/*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/\",\n                  element: /*#__PURE__*/_jsxDEV(Orders, {\n                    orders: orders,\n                    updateOrderStatus: this.updateOrderStatus\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/new-order\",\n                  element: /*#__PURE__*/_jsxDEV(NewOrder, {\n                    menuItems: menuItems,\n                    tables: tables,\n                    setOrders: this.setOrders,\n                    customCategories: customCategories\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 51\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/history\",\n                  element: /*#__PURE__*/_jsxDEV(History, {\n                    history: history,\n                    showLocation: this.showLocation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/menu\",\n                  element: /*#__PURE__*/_jsxDEV(MenuManagement, {\n                    menuItems: menuItems,\n                    setMenuItems: this.setMenuItems,\n                    nextItemId: nextItemId,\n                    setNextItemId: this.setNextItemId,\n                    customCategories: customCategories,\n                    setCustomCategories: this.setCustomCategories\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 46\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/payment\",\n                  element: /*#__PURE__*/_jsxDEV(Payment, {\n                    orders: orders,\n                    setOrders: this.setOrders,\n                    setHistory: this.setHistory,\n                    showReceipt: this.showReceipt\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }, this)\n    );\n  }\n}\nexport default App; // Export the main App component","map":{"version":3,"names":["React","Component","BrowserRouter","Router","Routes","Route","useLocalStorage","Navigation","Orders","NewOrder","History","MenuManagement","Payment","jsxDEV","_jsxDEV","App","constructor","props","state","orders","JSON","parse","localStorage","getItem","history","menuItems","id","name","price","category","nextItemId","customCategories","tables","updateOrderStatus","bind","showLocation","showReceipt","setOrders","setHistory","setMenuItems","setNextItemId","setCustomCategories","componentDidUpdate","prevProps","prevState","setItem","stringify","updater","setState","newOrders","newHistory","newMenuItems","newNextItemId","newCustomCategories","orderId","newStatus","map","order","status","location","alert","latitude","longitude","find","item","generateReceipt","paidOrder","receipt","toString","slice","Date","paymentTimestamp","toLocaleString","tableName","items","forEach","total","paymentMethod","printWindow","window","open","receiptContent","htmlContent","document","write","close","onload","print","onafterprint","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element"],"sources":["C:/Users/dinhp/Desktop/SIT/KAJ/src/App.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Navigation from './components/Navigation';\nimport Orders from './components/Orders';\nimport NewOrder from './components/NewOrder';\nimport History from './components/History';\nimport MenuManagement from './components/MenuManagement';\nimport Payment from './components/Payment';\nimport './styles/main.scss';\n\n// Main App component managing global state and routing.\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Initialize state by attempting to load from localStorage,\n    // falling back to default data if localStorage is empty.\n    this.state = {\n      orders: JSON.parse(localStorage.getItem('orders')) || [],\n      history: JSON.parse(localStorage.getItem('history')) || [],\n      menuItems: JSON.parse(localStorage.getItem('menuItems')) || [\n        // Default menu items\n        { id: 1, name: 'Kuřecí řízek', price: 150, category: 'main' },\n        { id: 2, name: 'Hovězí guláš', price: 130, category: 'main' },\n        { id: 3, name: 'Pivo', price: 35, category: 'drink' },\n        { id: 4, name: 'Kola', price: 30, category: 'drink' },\n        { id: 5, name: 'Zmrzlina', price: 45, category: 'dessert' }\n      ],\n      nextItemId: JSON.parse(localStorage.getItem('nextItemId')) || 6, // Tracks the next available ID for new menu items\n      customCategories: JSON.parse(localStorage.getItem('customCategories')) || [], // Stores user-defined menu categories\n      tables: JSON.parse(localStorage.getItem('tables')) || [\n        // Static table data\n        { id: 1, name: 'Stůl 1' },\n        { id: 2, name: 'Stůl 2' },\n        { id: 3, name: 'Stůl 3' },\n        { id: 4, name: 'Stůl 4' }\n      ]\n    };\n    // Bind all handler methods to the instance\n    this.updateOrderStatus = this.updateOrderStatus.bind(this);\n    this.showLocation = this.showLocation.bind(this);\n    this.showReceipt = this.showReceipt.bind(this);\n    this.setOrders = this.setOrders.bind(this);\n    this.setHistory = this.setHistory.bind(this);\n    this.setMenuItems = this.setMenuItems.bind(this);\n    this.setNextItemId = this.setNextItemId.bind(this);\n    this.setCustomCategories = this.setCustomCategories.bind(this);\n  }\n\n  /**\n   * Lifecycle method called after component updates (state or props changes).\n   * Used here to persist relevant state changes to localStorage.\n   * @param {object} prevProps - The previous props of the component.\n   * @param {object} prevState - The previous state of the component.\n   */\n  componentDidUpdate(prevProps, prevState) {\n    // Check if specific state slices have changed before saving to avoid unnecessary writes\n    if (prevState.orders !== this.state.orders) {\n      localStorage.setItem('orders', JSON.stringify(this.state.orders));\n    }\n    if (prevState.history !== this.state.history) {\n      localStorage.setItem('history', JSON.stringify(this.state.history));\n    }\n    if (prevState.menuItems !== this.state.menuItems) {\n      localStorage.setItem('menuItems', JSON.stringify(this.state.menuItems));\n    }\n    if (prevState.nextItemId !== this.state.nextItemId) {\n      localStorage.setItem('nextItemId', JSON.stringify(this.state.nextItemId));\n    }\n    if (prevState.customCategories !== this.state.customCategories) {\n      localStorage.setItem('customCategories', JSON.stringify(this.state.customCategories));\n    }\n    // Tables are currently static, so saving them is not necessary unless they become dynamic.\n  }\n\n  /**\n   * Custom state updater for the 'orders' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous orders state and returns the new state, or the new state array directly.\n   */\n  setOrders(updater) {\n    this.setState(prevState => {\n      // Handle both function-based and direct value updates\n      const newOrders = typeof updater === 'function' ? updater(prevState.orders) : updater;\n      localStorage.setItem('orders', JSON.stringify(newOrders));\n      return { orders: newOrders };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'history' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous history state and returns the new state, or the new state array directly.\n   */\n  setHistory(updater) {\n    this.setState(prevState => {\n      const newHistory = typeof updater === 'function' ? updater(prevState.history) : updater;\n      localStorage.setItem('history', JSON.stringify(newHistory));\n      return { history: newHistory };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'menuItems' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<object>} updater - A function that receives the previous menuItems state and returns the new state, or the new state array directly.\n   */\n   setMenuItems(updater) {\n    this.setState(prevState => {\n      const newMenuItems = typeof updater === 'function' ? updater(prevState.menuItems) : updater;\n      localStorage.setItem('menuItems', JSON.stringify(newMenuItems));\n      return { menuItems: newMenuItems };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'nextItemId' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|number} updater - A function that receives the previous nextItemId state and returns the new state, or the new state number directly.\n   */\n   setNextItemId(updater) {\n    this.setState(prevState => {\n      const newNextItemId = typeof updater === 'function' ? updater(prevState.nextItemId) : updater;\n      localStorage.setItem('nextItemId', JSON.stringify(newNextItemId));\n      return { nextItemId: newNextItemId };\n    });\n  }\n\n  /**\n   * Custom state updater for the 'customCategories' state.\n   * Updates the state and immediately persists the change to localStorage.\n   * @param {function|Array<string>} updater - A function that receives the previous customCategories state and returns the new state, or the new state array directly.\n   */\n   setCustomCategories(updater) {\n    this.setState(prevState => {\n      const newCustomCategories = typeof updater === 'function' ? updater(prevState.customCategories) : updater;\n      localStorage.setItem('customCategories', JSON.stringify(newCustomCategories));\n      return { customCategories: newCustomCategories };\n    });\n  }\n\n  /**\n   * Updates the status of a specific order.\n   * @param {number} orderId - The ID of the order to update.\n   * @param {string} newStatus - The new status to set for the order (e.g., 'pending', 'ready', 'paid').\n   */\n  updateOrderStatus(orderId, newStatus) {\n    this.setOrders(orders =>\n      orders.map(order =>\n        order.id === orderId ? { ...order, status: newStatus } : order\n      )\n    );\n  }\n\n  /**\n   * Handler to show user's location (simulated using alert).\n   * Connected to the History component's geolocation button.\n   * @param {object} location - An object containing location details (e.g., latitude, longitude, accuracy).\n   */\n  showLocation(location) {\n    alert(`Vaše poloha: ${location.latitude}, ${location.longitude}`);\n  }\n\n  /**\n   * Handler to generate and display a receipt for a completed order (simulated print).\n   * Connected to the History and Payment components.\n   * @param {number} orderId - The ID of the order to generate a receipt for.\n   */\n  showReceipt(orderId) {\n    const order = this.state.history.find(item => item.id === orderId);\n    if (!order) {\n      alert('Účtenka nebyla nalezena.');\n      return;\n    }\n\n    // Helper function to format the receipt content as a string.\n    const generateReceipt = (paidOrder) => {\n      let receipt = '\\n';\n      receipt += '==================\\n';\n      receipt += '=== RESTAURACE ===\\n';\n      receipt += '==================\\n\\n';\n      receipt += `Transakce #${paidOrder.id.toString().slice(-4)}\\n`;\n      receipt += `Datum: ${new Date(paidOrder.paymentTimestamp).toLocaleString()}\\n\\n`;\n      receipt += `Stůl: ${paidOrder.tableName}\\n`;\n      receipt += `Číslo objednávky: ${paidOrder.id}\\n\\n`;\n      receipt += '------------------\\n\\n';\n      receipt += 'Položky:\\n\\n';\n      paidOrder.items.forEach(item => {\n        receipt += `${item.name} ${item.price} Kč\\n`;\n      });\n      receipt += '\\n------------------\\n\\n';\n      receipt += `Celkem: ${paidOrder.total} Kč\\n`;\n      receipt += `Platba: ${paidOrder.paymentMethod === 'cash' ? 'Hotovost' : 'Karta'}\\n\\n`;\n      receipt += '==================\\n\\n';\n      receipt += 'Děkujeme za návštěvu!\\n';\n      receipt += 'Vítejte znovu\\n\\n';\n      receipt += '=== Harukoid s.r.o. ===\\n';\n      return receipt;\n    };\n\n    // Open a new window to simulate printing.\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) {\n      alert('Pop-up blokován. Povolte prosím vyskakovací okna pro tisk účtenky.');\n      return;\n    }\n\n    const receiptContent = generateReceipt(order);\n    // Construct basic HTML content for the receipt window.\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Účtenka #${order.id.toString().slice(-4)}</title>\n          <style>\n            @page {\n              size: 5.5in 8.5in; /* Typical receipt size */\n              margin: 0;\n            }\n            body {\n              font-family: monospace; /* Monospace font for receipt look */\n              white-space: pre; /* Preserve line breaks and spaces */\n              padding: 40px;\n              font-size: 14px;\n              line-height: 1.6;\n              width: 5.5in;\n              min-height: 8.5in;\n              margin: 0;\n              text-align: center;\n            }\n            @media print {\n              body {\n                padding: 40px;\n                margin: 0;\n                width: 5.5in;\n                min-height: 8.5in;\n                text-align: center;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          ${receiptContent}\n        </body>\n      </html>\n    `;\n\n    // Write content to the new window and close the document stream.\n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n\n    // Once the content is loaded, trigger the print dialog and close the window after printing.\n    printWindow.onload = function() {\n      printWindow.print();\n      printWindow.onafterprint = function() {\n        printWindow.close();\n      };\n    };\n  }\n\n  render() {\n    // Destructure state variables for easier access in render method.\n    const { orders, history, menuItems, nextItemId, customCategories, tables } = this.state;\n\n    return (\n      // BrowserRouter provides routing context.\n      <Router>\n        <div className=\"app\">\n          <div className=\"app-content\">\n            {/* Navigation component, receives history and showReceipt handler */}\n            <Navigation history={history} showReceipt={this.showReceipt} />\n\n            <main className=\"main-content\"> {/* Main content area with semantic tag */}\n              <header className=\"app-header\"> {/* Header with semantic tag */}\n                <div className=\"header-content\">\n                  <h1>Restaurant Cash Register</h1> {/* Main application title */}\n                  {/* Connection status indicator */}\n                  <div id=\"connectionStatus\" className=\"connection-status\">Online</div>\n                </div>\n              </header>\n              {/* Routes define which component to render based on the URL path */}\n              <Routes>\n                {/* Route for the Orders page, passes orders state and updateOrderStatus handler */}\n                <Route path=\"/\" element={<Orders orders={orders} updateOrderStatus={this.updateOrderStatus} />} />\n                {/* Route for the New Order page, passes menu data, tables, order setter, and custom categories */}\n                <Route path=\"/new-order\" element={<NewOrder menuItems={menuItems} tables={tables} setOrders={this.setOrders} customCategories={customCategories} />} />\n                {/* Route for the History page, passes history data and showLocation handler */}\n                <Route path=\"/history\" element={<History history={history} showLocation={this.showLocation} />} />\n                {/* Route for the Menu Management page, passes menu data, setters, and category data/setters */}\n                <Route path=\"/menu\" element={<MenuManagement menuItems={menuItems} setMenuItems={this.setMenuItems} nextItemId={nextItemId} setNextItemId={this.setNextItemId} customCategories={customCategories} setCustomCategories={this.setCustomCategories} />} />\n                {/* Route for the Payment page, passes orders data, setters for orders/history, and showReceipt handler */}\n                <Route path=\"/payment\" element={<Payment orders={orders} setOrders={this.setOrders} setHistory={this.setHistory} showReceipt={this.showReceipt} />} />\n              </Routes>\n            </main>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App; // Export the main App component"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}